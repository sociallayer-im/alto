{"abi":[],"bytecode":{"object":"0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220551cd6c7df6555a644302a2dc6b9733b86d6f37c2d524ff44a43cb86d9d29a2264736f6c634300081c0033","sourceMap":"1163:3910:20:-:0;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x5f80fdfea2646970667358221220551cd6c7df6555a644302a2dc6b9733b86d6f37c2d524ff44a43cb86d9d29a2264736f6c634300081c0033","sourceMap":"1163:3910:20:-:0;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing value-types to specific transient storage slots. Transient slots are often used to store temporary values that are removed after the current transaction. This library helps with reading and writing to such slots without the need for inline assembly.  * Example reading and writing values using transient storage: ```solidity contract Lock {     using TransientSlot for *;     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;     modifier locked() {         require(!_LOCK_SLOT.asBoolean().tload());         _LOCK_SLOT.asBoolean().tstore(true);         _;         _LOCK_SLOT.asBoolean().tstore(false);     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-51/contracts/utils/TransientSlot.sol\":\"TransientSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[\":@openzeppelin/contracts-51/=lib/openzeppelin-contracts-51/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction-v6/=lib/account-abstraction-v6/contracts/\",\":account-abstraction-v7/=lib/account-abstraction-v7/contracts/\",\":account-abstraction-v8/=lib/account-abstraction-v8/contracts/\",\":account-abstraction/=lib/account-abstraction-v6/contracts/\",\":bulk/=lib/bulk/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-51/lib/halmos-cheatcodes/src/\",\":lib/openzeppelin-contracts-51/=lib/openzeppelin-contracts-51/\",\":openzeppelin-contracts-51/=lib/openzeppelin-contracts-51/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":p256-verifier/=lib/bulk/lib/p256-verifier/\",\":solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-51/contracts/utils/TransientSlot.sol\":{\"keccak256\":\"0xb54649686c3eb4c036930cfdad1949fc13b8b9f1b586af31646e9eaa69529eda\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ebb209def7de0f27f45cab753ee4147ee6a53e8ed9eb6ef92b3a279151e35e3\",\"dweb:/ipfs/Qmdt3X5PefKsRsMziwXfn7Q1afRwHxC8NjQwAGM1QeUCBr\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-51/=lib/openzeppelin-contracts-51/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","account-abstraction-v6/=lib/account-abstraction-v6/contracts/","account-abstraction-v7/=lib/account-abstraction-v7/contracts/","account-abstraction-v8/=lib/account-abstraction-v8/contracts/","account-abstraction/=lib/account-abstraction-v6/contracts/","bulk/=lib/bulk/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-51/lib/halmos-cheatcodes/src/","lib/openzeppelin-contracts-51/=lib/openzeppelin-contracts-51/","openzeppelin-contracts-51/=lib/openzeppelin-contracts-51/","openzeppelin-contracts/=lib/openzeppelin-contracts/","p256-verifier/=lib/bulk/lib/p256-verifier/","solady/=lib/solady/src/"],"optimizer":{"enabled":true,"runs":1000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts-51/contracts/utils/TransientSlot.sol":"TransientSlot"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts-51/contracts/utils/TransientSlot.sol":{"keccak256":"0xb54649686c3eb4c036930cfdad1949fc13b8b9f1b586af31646e9eaa69529eda","urls":["bzz-raw://1ebb209def7de0f27f45cab753ee4147ee6a53e8ed9eb6ef92b3a279151e35e3","dweb:/ipfs/Qmdt3X5PefKsRsMziwXfn7Q1afRwHxC8NjQwAGM1QeUCBr"],"license":"MIT"}},"version":1},"id":20}